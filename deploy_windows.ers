#!/usr/bin/env rust-script
/*!
This file is intended to be run using [rust-script](https://rust-script.org/). The fenced code-block for the 'cargo' language specifies it's dependencies.

This script makes some pre-flight checks to ensure that everything's ready for deployment, then uses `cargo release` to create appropriate version tags, and some other tools to generate installation packages. It finishes by retagging into release candidate mode, preparing for next version.

```cargo
[dependencies]
```
*/
use std::process::ExitCode;
use std::process::Command;



fn main() -> ExitCode {

    if !cfg!(target_os = "windows") {
        eprintln!("This script is meant to be run on Windows.");
        return ExitCode::FAILURE;
    }

    let cd = std::env::current_dir().unwrap();
    let cd = cd.display();
    let homedrive = std::env::var("homedrive").unwrap();
    let homepath = std::env::var("homepath").unwrap();
    let path = if let Ok(path) = std::env::var("PATH") {
        // they might already have this set for debugging, but it doesn't matter if it's repeated, does it?
        format!("{cd}\\windows\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin;{path}")
    } else {
        format!("{cd}\\windows\\pkg-config-lite-0.28-1_bin-win32\\pkg-config-lite-0.28-1\\bin")
    };

    // FUTURE: It might be better to let the user set these environment variables how they want it, perhaps a setup_env script?

    println!("Building release .exe");
    if !Command::new("cargo").args(["build","--release"]).envs([
        ("PATH",path),
        ("GDAL_HOME",format!("{cd}\\windows\\release-1930-x64-dev\\release-1930-x64")),
        ("PKG_CONFIG_PATH",format!("{homedrive}{homepath}\\miniconda3\\Library\\lib\\pkgconfig")),
    ]).status().unwrap().success() {
        eprintln!("One possibility is that you didn't set up the GDAL requirements as decribed in Compiling.md.");
        return ExitCode::FAILURE;
    }


    println!("Collecting files");
    if let Ok(metadata) = std::fs::metadata("target/windows_deploy") {
        assert!(metadata.is_dir())
    } else {
        std::fs::create_dir("target/windows_deploy").unwrap();
    }

    // we're on windows command line, might as well make use of windows tools. I don't have to do a recursive read_dir and copy everything.
    // Doing it for the executable also makes sure I have a consistent output.
    if !Command::new("xcopy").args(["/Y","target\\release\\cosmopoeia.exe","target\\windows_deploy\\"]).status().unwrap().success() {
        return ExitCode::FAILURE;
    }


    if !Command::new("xcopy").args(["/S","/Y","share\\","target\\windows_deploy\\share\\"]).status().unwrap().success() {
        return ExitCode::FAILURE;
    }

    // rather than pick and choose which files should be copied, I just use xcopy and delete the one file I don't want in there.
    std::fs::remove_file("target/windows_deploy/share/qgis/World.gpkg").unwrap();

    // get version tag:
    let version = Command::new("git").args(["describe","--tags","--abbrev=0"]).output().unwrap();
    if !version.status.success() {
        eprintln!("{}",String::from_utf8(version.stdout).unwrap());
        eprintln!("{}",String::from_utf8(version.stderr).unwrap());
        return ExitCode::FAILURE;
    }
    let version = String::from_utf8(version.stdout).unwrap();
    let version = version.trim();

    println!("Compressing to zip file.");
    let zip_file = format!("target\\cosmopoeia-{version}-windows-64.zip"); // cosmopoeia-<Version>-windows-64.zip
    // TODO: I need to include the version number and possibly the target os on this.
    if !Command::new("tar").args(["-ac","-f",&zip_file,"-C","target\\windows_deploy","*"]).status().unwrap().success() {
        return ExitCode::FAILURE;
    }
    println!("Release is found at {zip_file}");





    ExitCode::SUCCESS


}