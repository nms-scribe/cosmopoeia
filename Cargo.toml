[package]
name = "cosmopoeia"
description = "A tool to generate fantasy maps for GIS."
version = "0.1.2"
edition = "2021"
authors = ["N M Sheldon"]
repository = "https://github.com/nms-scribe/cosmopoeia"
license-file = "license.txt"
readme = "Readme.md"
keywords = ["fantasy","gis","mapmaking","cartography"]
# NOTE: the category 'science::geo' is only used because this program relates to GIS. The name 'science' in the category makes no declarations about the usability of cosmpopoeia for scientific purposes. The name of this category was chosen by the people behind cargo and crates.io and I have no way of changing it.
categories = ["command-line-utilities","science::geo"] 

[dependencies]
adaptive-bezier = "0.1.0"
angular-units = { version = "0.2.4", features = ["serde"] }
clap = { version = "4.3.11", features = ["derive"] }
clap-markdown = "0.1.3"
console = "0.15.7"
gdal = { version = "0.16.0", features = ["array"] }
gdal-sys = "0.9.0"
indexmap = { version = "2.0.0", features = ["serde"] }
indicatif = "0.17.5"
ordered-float = "3.7.0"
paste = "1.0.14"
priority-queue = "1.3.2"
prisma = "0.1.1"
qutee = "0.1.1"
rand = "0.8.5"
rand_distr = "0.4.3"
rangemap = "1.4.0"
schemars = "0.8.15"
serde = { version = "1.0.183", features = ["derive"] }
serde_json = "1.0.104"


# tips from https://github.com/johnthagen/min-sized-rust -- this reduced the final binary size immensely
# Speed also appears to be improved, I witnessed repeated running times of about 55% of the debug release (11 sec vs 29 sec), both targets already compiled and built.
[profile.release]
strip = true  # Automatically strip symbols from the binary.
opt-level = "z"  # Optimize for size.
lto = true #  instructs the linker to optimize at the link stage. This can, for example, remove dead code and often times reduces binary size.
codegen-units = 1 #By default, Cargo specifies 16 parallel codegen units for release builds. This improves compile times, but prevents some optimizations.
panic = "abort" # By default, when Rust code encounters a situation when it must call panic!(), it unwinds the stack and produces a helpful backtrace. The unwinding code, however, does require extra binary size. rustc can be instructed to abort immediately rather than unwind, which removes the need for this extra unwinding code.
overflow-checks = true # NMS: As this program depends on a lot of math and numeric input, I think it's important to check for overflows to avoid invalid data. This does not appear to effect the improved speed of the binary release.
